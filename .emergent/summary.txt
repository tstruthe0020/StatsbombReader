<analysis>
The AI engineer successfully transitioned the Referee–Playstyle–Discipline analytics module from initial setup to a robust Match Viewer. Initially, the focus was on resolving critical backend issues, starting with a  in fallback data date formatting and an  caused by incorrect  initialization. This led to a comprehensive fix for real StatsBomb data integration, ensuring correct team/player names and statistics were fetched.

Subsequently, the effort shifted to the frontend, creating a dedicated Match Viewer tab. This involved significant refactoring of  and the development of several new components (, , , , ). Key user-requested features, such as interactive foul maps with accurate categorization and hover details, and visual formation graphics displaying all players with dynamic team names, were implemented and refined through several iterations. The system is now prepared for the Tactical Analysis phase, with a solid foundation of real-time data integration and a user-friendly match analysis interface.
</analysis>

<product_requirements>
The overarching goal is to integrate a Referee–Playstyle–Discipline analytics module into a React/FastAPI/MongoDB application using StatsBomb Open Data. This module aims to quantify how team playstyles influence disciplinary outcomes, featuring a spatial component. The desired output includes a reproducible pipeline for team–match features, zone-wise Negative Binomial GLMs, and various visualizations (heatmaps, forest plots) via CLI and REST endpoints.

Initially, a Referee Discipline tab was envisioned, with components for filters, heatmaps, forest plots, and a What-If panel across various pages. However, the immediate user request shifted to a streamlined Match Viewer tab. This tab requires the ability to search and select matches, view real StatsBomb lineups and formations (visually), an interactive foul map with detailed hover information (players, foul type, time, card status), a placeholder for team tactical profiles, and display of relevant team match statistics. Subsequent refinements included accurate foul categorization (no card, yellow, red), dynamic team names on the foul map, ensuring all players are displayed in formation graphics without overlap, and fixing specific match formation display issues. The overall intent is to provide a comprehensive and accurate match analysis tool.
</product_requirements>

<key_technical_concepts>
- **Full-stack Application**: React.js (Frontend), FastAPI (Backend), MongoDB (Database).
- **Data Processing**: , , ,  for StatsBomb data.
- **Statistical Modeling**:  for Negative Binomial GLMs (backend, not fully detailed in trajectory).
- **Frontend State Management**:  (mentioned in initial requirements, but / used in trajectory).
- **Deployment**: Kubernetes container environment, backend                          RUNNING   pid 27, uptime 0:00:04
code-server                      RUNNING   pid 29, uptime 0:00:04
frontend                         STOPPING  
mongodb                          RUNNING   pid 34, uptime 0:00:04
supervisor> .
- **Authentication**: GitHub Personal Access Tokens for StatsBomb API.
</key_technical_concepts>

<code_architecture>

- **/app/backend/server.py**
    - **Summary**: Main FastAPI application handling API routes and data integration.
    - **Changes Made**:
        - Fixed  in fallback data generation for  (incorrect date format ).
        - Corrected  initialization by passing  instance instead of raw PyGithub object to enable real data loading.
        - Resolved  by adding robust null checks for  and  in tactical analysis.
        - Updated event processing logic to use correct flattened StatsBomb data fields like , ,  instead of generic .
- **/app/src/io_load.py**
    - **Summary**: Contains  for fetching StatsBomb data via GitHub API.
    - **Changes Made**: Implied internal changes to support flattened data structure, but not explicitly edited within the trajectory other than the correct client being passed to it.
- **/app/backend/.env**
    - **Summary**: Stores environment variables like .
    - **Changes Made**:  verified to be set.
- **/app/frontend/src/App.js**
    - **Summary**: Main React entry point.
    - **Changes Made**: Refactored extensively to simplify the UI to a single Match Viewer tab, removing previous complex components and integrating  as the primary content.
- **/app/frontend/src/components/MatchViewer.js** (New File)
    - **Summary**: Orchestrates the display of match selection, details, lineups, foul map, stats, and tactical profile.
    - **Changes Made**: Initial creation, integrated , , , . Updated to pass dynamic  and  to .
- **/app/frontend/src/components/LineupViewer.js** (New File)
    - **Summary**: Displays team lineups and formations.
    - **Changes Made**: Initial creation. Refactored to use  component. Enhanced position detection, added smart overflow handling for players, and increased component size for better readability. Implemented smart name truncation for long player names.
- **/app/frontend/src/components/MatchStats.js** (New File)
    - **Summary**: Displays match statistics.
    - **Changes Made**: Initial creation, designed to integrate real match data.
- **/app/frontend/src/components/FoulMap.js** (New File)
    - **Summary**: Visualizes fouls on a soccer field with hover information.
    - **Changes Made**: Initial creation. Fixed  by adding a safety check. Implemented correct color-coding for fouls (no card, yellow, red) and enhanced hover tooltips to show player, foul type, time, and card info. Updated to display dynamic  and  in the legend.
- **/app/frontend/src/components/TacticalProfile.js** (New File)
    - **Summary**: Placeholder for future tactical profile analysis.
    - **Changes Made**: Initial creation as a placeholder.
- **/app/frontend/src/components/FormationGraphic.js** (New File)
    - **Summary**: Renders visual soccer field formations with player positioning.
    - **Changes Made**: Initial creation to visualize formations, replacing list-based lineups. Improved player circle sizes and name positioning for readability.
</code_architecture>

<pending_tasks>
- Full Frontend Component Implementation: Implement detailed UI logic for all components and pages within  (currently most logic is in  or new components).
- Frontend Testing: Write and pass component and E2E tests for the  module and newly created Match Viewer components.
- Documentation: Create a short  in  with screenshots and API contracts.
- Backend Testing (CLI): Ensure  runs end-to-end.
- Overall Docstrings: Add clear docstrings to all new Python code.
- Address any remaining minor errors in formation graphics.
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer successfully resolved all identified issues related to the frontend's Match Viewer component. This included fixing player display issues in the formation graphics, such as players missing or names overlapping due to long names or unusual position classifications. Specifically, the formation logic in  was enhanced with more robust position detection, smart overflow handling, and a sophisticated name truncation mechanism to ensure all 11 players are always displayed clearly, even for complex formations like Inter Milan's 4-2-3-1 in the 2009/2010 Champions League final.

The frontend is now fully operational with the Match Viewer, capable of:
1.  **Searching and selecting matches** from various competitions and seasons.
2.  Displaying **real StatsBomb lineups and formations** visually, with correctly positioned players and jersey numbers.
3.  An **interactive foul map** that accurately categorizes fouls (no card, yellow, red) and provides detailed hover information (player, foul type, time, card).
4.  Dynamically showing **home/away team names** on the foul map indicator.
5.  Integrating **real match statistics** from the backend.
6.  A placeholder for **tactical profiles**.

The backend data pipeline is also stable, successfully fetching real StatsBomb data, and gracefully handling edge cases like invalid match IDs or API token issues. The work concludes with the system ready for the next phase: implementing advanced tactical analysis.
</current_work>

<optional_next_step>
Start implementing the advanced tactical metrics and analysis features within the  component.
</optional_next_step>

